version: '3'

services:

# -----------------------
# API service for fastapi
# -----------------------
  api:
    image: wasata/api
    restart: unless-stopped
    container_name: wasata_api
    build:
      context: ../../app
      dockerfile: Dockerfile
    profiles: ["production", "dev", "demo"]
    ports:
      - 8080:8080
    command: "./entrypoint.sh"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api:8080/api/v1/health"]
      interval: 15s
      retries: 5
    depends_on:
      - dev-postgres
    networks:
      - wasata-bridge

# -------------------------
# Postgres database service
# -------------------------
  dev-postgres:
    image: wasata/dev-postgres
    restart: unless-stopped
    container_name: wasata_db
    build:
      context: ../../dev-database
      dockerfile: Dockerfile
    profiles: ["demo", "dev"]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 30s
      timeout: 60s
      retries: 5
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - wasata-bridge

# -------------------------
# Frontend service
# -------------------------
  frontend:
    container_name: wasata_frontend
    image: wasata/frontend
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    profiles: ["production", "dev", "demo"]
    restart: unless-stopped
    ports:
      - 3030:3030
    command: npm start
    depends_on:
      - api
    networks:
      - wasata-bridge

# --------------------------------
# PgAdmin database browser service
# --------------------------------
  pgadmin:
    container_name: wasata_pgadmin
    image: dpage/pgadmin4
    platform: linux/amd64
    profiles: ["production", "demo", "dev"]
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - 5050:5050
    restart: unless-stopped
    depends_on:
      - dev-postgres
    networks:
      - wasata-bridge

# ----------------------------
# Container log viewer service
# ----------------------------
  dozzle:
    container_name: wasata_dozzle
    image: amir20/dozzle:latest
    platform: linux/amd64
    profiles: ["production", "demo", "dev"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9999:8080
    depends_on:
      - dev-postgres

# bridge network for all containers
networks:
  wasata-bridge:
    driver: bridge

volumes:
  postgres_data:

